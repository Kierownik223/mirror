{% extends "base" %}

{% block content %}
<div id="uploadResults"></div>
<div class="breadcrumb">
    <span><a href="/">MARMAK Mirror</a>/</span><span class="seg"> </span>
    {% if path != "/" %}
        {% set segments = path | split(pat="/") %}
        {% for i in range(end=segments | length) %}
            {% set subpath = segments | slice(start=0, end=i+1) %}
            {% set url = subpath | join(sep="/") %}
            {% if url != "" %}
                <span><a href="{{ url | urlencode | safe }}/">{{ segments[i] }}</a>/</span><span class="seg"> </span>
            {% endif %}
        {% endfor %}
    {% endif %}
    {% if admin and path != "/" or private %}
    <div style="float: right;">
        <a href="/upload?path={{ path }}"><span><img class="icon" src="/static/images/icons/{% if hires %}hires/{% endif %}favicon.png">{{ strings.uploader }}</span></a>
    </div>
    {% endif %}
</div>
<table>
    {% if is_logged_in and config.enable_zip_downloads or admin or private %}
    <thead>
        <tr>
            <td style="width: 1em; white-space: nowrap;"><input type="checkbox" id="selectAll" onclick="toggleAllCheckboxes(this)"></td>
            <td>
            {% if config.enable_zip_downloads %}
            <a style="cursor: pointer;" href="javascript:;" onclick="downloadAsZip()" id="downloadZip">{{ strings.download_zip }} (BETA)</a>
            {% endif %}
            {% if admin or private %}
            <a style="cursor: pointer;" href="javascript:;" onclick="deleteSelected()">{{ strings.delete }}</a>
            {% endif %}
            </td>
        </tr>
    </thead>
    {% endif %}
    <tbody>
        {% if path != "/" %}
        <tr>
            {% if is_logged_in and config.enable_zip_downloads or admin or private %}<td></td>{% endif %}
            <td><a href="../"><img src="/static/images/icons/{% if hires %}hires/{% endif %}folder.png" class="icon">../</a></td>
            <td class="hide-more">---</td>
            <td class="hide">{{ strings.folder }}</td>
            {% if admin or private %}<td></td>{% endif %}
        </tr>
        {% endif %}

        {% for s in dirs %}
        <tr>
            {% if is_logged_in and config.enable_zip_downloads or admin or private %}
            <td><input type="checkbox" class="delete-checkbox" value="{{ s.name | safe | addslashes }}"></td>
            {% endif %}
            <td><a href="{{ s.name | urlencode }}/"><img src="/static/images/icons/{% if hires %}hires/{% endif %}{{ s.icon }}.png" class="icon">{{ s.name }}/</a></td>
            <td class="hide-more">{{ s.size | filesizeformat | replace(from=" B", to="  ") | replace(from="B", to="iB") | replace(from="  ", to=" B") | replace(from="k", to="K")}}</td>
            <td class="hide">{{ strings.folder }}</td>
            {% if admin or private %}
            <td><a style="cursor: pointer;" href="javascript:;" onclick="deleteFile(this, '{{ s.name | safe | addslashes }}', true)">{{ strings.delete }}</a></td>
            {% endif %}
        </tr>
        {% endfor %}
        {% for s in files %}
        <tr>
            {% if is_logged_in and config.enable_zip_downloads or admin or private %}
            <td><input type="checkbox" class="delete-checkbox" value="{{ s.name | safe | addslashes }}"></td>
            {% endif %}
            <td><a href="{{ s.name | urlencode }}"><img src="/static/images/icons/{% if hires %}hires/{% endif %}{{ s.icon }}.png" class="icon">{{ s.name }}</a></td>
            <td class="hide-more">{{ s.size | filesizeformat | replace(from=" B", to="  ") | replace(from="B", to="iB") | replace(from="  ", to=" B") | replace(from="k", to="K")}}</td>
            <td class="hide">{{ strings.file }}</td>
            {% if admin or private %}
            <td><a style="cursor: pointer;" href="javascript:;" onclick="renameFile(this, '{{ s.name | safe | addslashes }}', true)">{{ strings.rename }}</a> <a style="cursor: pointer;" href="javascript:;" onclick="deleteFile(this, '{{ s.name | safe | addslashes }}', true)">{{ strings.delete }}</a></td>
            {% endif %}
        </tr>
        {% endfor %}
    </tbody>
</table>
{% if markdown != "" %}
<p><span><img class="icon" src="/static/images/icons/{% if hires %}hires/{% endif %}md.png">README.md</span></p>
{{ markdown | safe}}
{% endif %}
{% endblock content %}

{% block scripts %}
{% if is_logged_in %}
    <script src="/static/polyfills.js"></script>
    <script>
        function toggleAllCheckboxes(master) {
            var inputs = document.getElementsByTagName("input");
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].type === "checkbox" && hasClass(inputs[i], "delete-checkbox")) {
                    inputs[i].checked = master.checked;
                }
            }
        }

        function downloadAsZip() {
            var inputs = document.getElementsByTagName("input");
            var filePathList = [];
            var pathname = "/";
            if (window.location && typeof window.location.pathname === "string") {
                pathname = window.location.pathname;
            }

            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                if (input.type === "checkbox" && hasClass(input, "delete-checkbox") && input.checked) {
                    filePathList.push(pathname + input.value);
                }
            }

            if (filePathList.length === 0) {
                alert("{{ strings.select_files }}");
                return;
            }

            var formData = new FormData();
            formData.append("files", JSON.stringify(filePathList));

            var download_link = document.getElementById("downloadZip");
            download_link.innerText = "{{ strings.preparing_zip }}";
            download_link.onclick = null;

            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/api/zip", true);

            xhr.responseType = "blob";

            xhr.onload = function () {
                if (xhr.status === 200) {
                    var blob = xhr.response;

                    if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                        window.navigator.msSaveOrOpenBlob(blob, "download.zip");
                    } else {
                        var link = document.createElement('a');
                        var url = window.URL.createObjectURL(blob);
                        link.href = url;
                        link.download = "download.zip";
                        link.click();
                        window.URL.revokeObjectURL(url);
                    }

                    download_link.innerText = "{{ strings.download_zip }} (BETA)";
                    download_link.onclick = function () { downloadAsZip(); };
                } else {
                    alert("{{ strings.error }}");
                }
            };

            xhr.onerror = function () {
                alert("{{ strings.error }}");
            };

            xhr.send(formData);
        }

        function hasClass(el, cls) {
            return el.className && (" " + el.className + " ").indexOf(" " + cls + " ") > -1;
        }

        function deleteSelected() {
            var inputs = document.getElementsByTagName("input");
            var filePathList = [];
            var elementList = [];
            var pathname = "/";
            if (window.location && typeof window.location.pathname === "string") {
                pathname = window.location.pathname;
            }

            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                if (input.type === "checkbox" && hasClass(input, "delete-checkbox") && input.checked) {
                    filePathList[filePathList.length] = input.value;

                    var row = input;
                    while (row && row.nodeType === 1 && String(row.tagName).toLowerCase() !== "tr") {
                        row = row.parentNode;
                    }

                    elementList[elementList.length] = row;
                }
            }

            if (filePathList.length === 0) {
                return;
            }

            var i, confirmMsg = "{{ strings.delete_confirmation }}\n";
            for (i = 0; i < filePathList.length; i++) {
                confirmMsg += filePathList[i] + "\n";
            }

            if (!confirm(confirmMsg)) {
                return;
            }

            var currentIndex = 0;
            function deleteNext() {
                if (currentIndex >= filePathList.length) return;
                var path = filePathList[currentIndex];
                var rowElement = elementList[currentIndex];
                currentIndex++;

                deleteFile(rowElement, path, false, deleteNext);
            }

            deleteNext();
        }

        function renameFile(element, filePath) {
            var pathname = "/";
            if (window.location && typeof window.location.pathname === "string") {
                pathname = window.location.pathname;
            }
            var path = pathname + encodeURIComponent(filePath);
            var confirmMsg = "{{ strings.delete_confirmation }} " + decodeURIComponent(path) + "?";

            var newName = prompt("{{ strings.new_name }}:", filePath);

            if (newName == null) {
                return;
            }

            var xhr;
            if (window.XMLHttpRequest) {
                xhr = new XMLHttpRequest();
            } else {
                try {
                    xhr = new ActiveXObject("Microsoft.XMLHTTP");
                } catch (e) {
                    alert("{{ strings.error_deleting }}");
                    return;
                }
            }

            try {
                xhr.open("PATCH", "/api" + path, true);
            } catch (e) {
                alert("{{ strings.error_renaming }}");
                return;
            }

            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        try {
                            var response = JSON.parse(xhr.responseText);

                            element.onclick = function () { renameFile(element, response.name) };

                            var row = element;
                            while (row && row.nodeType === 1) {
                                if (String(row.tagName).toLowerCase() === 'tr') break;
                                row = row.parentNode;
                            }

                            if (row) {
                                var cells = row.getElementsByTagName("td");
                                if (cells.length > 0) {
                                    var td = cells[1];
                                    var link = td.querySelector("a");

                                    if (link) {
                                        link.setAttribute("href", "../" + response.name);

                                        link.innerHTML = "";

                                        var img = document.createElement("img");
                                        img.src = "/static/images/icons/{% if hires %}hires/{% endif %}" + response.icon + ".png";
                                        img.className = "icon";

                                        link.appendChild(img);
                                        link.appendChild(document.createTextNode(response.name));
                                    }
                                }
                            }

                            alert("{{ strings.rename_success }}");
                        } catch (e) {
                            location.reload();
                        }
                    } else if (xhr.status === 404) {
                        alert("{{ strings.not_found }}");
                    } else {
                        try {
                            var errorResponse = JSON.parse(xhr.responseText);
                            alert("{{ strings.error_occured }} " + errorResponse.message);
                        } catch (e) {
                            alert("{{ strings.error_occured }}");
                        }
                    }
                }
            };

            try {
                xhr.send("{\"name\":\"" + newName + "\"}");
            } catch (e) {
                alert("{{ strings.error_deleting }}");
                if (onComplete) onComplete();
            }
        }

        function deleteFile(element, filePath, message, onComplete) {
            var pathname = "/";
            if (window.location && typeof window.location.pathname === "string") {
                pathname = window.location.pathname;
            }
            if (typeof encodeURIComponent === 'undefined') {
                var path = pathname + escape(filePath);
            } else {
                var path = pathname + encodeURIComponent(filePath);
            }
            var confirmMsg = "{{ strings.delete_confirmation }} " + decodeURIComponent(path) + "?";

            if (message) {
                if (!confirm(confirmMsg)) {
                    return;
                }
            }

            var xhr;
            if (window.XMLHttpRequest) {
                xhr = new XMLHttpRequest();
            } else {
                try {
                    xhr = new ActiveXObject("Microsoft.XMLHTTP");
                } catch (e) {
                    alert("{{ strings.error_deleting }}");
                    return;
                }
            }

            try {
                xhr.open("DELETE", "/api" + path, true);
            } catch (e) {
                alert("{{ strings.error_deleting }}");
                return;
            }

            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.status == 204) {
                        try {
                            var row = element;
                            while (row && row.nodeType === 1) {
                                if (String(row.tagName).toLowerCase() === 'tr') break;
                                row = row.parentNode;
                            }

                            if (row && row.parentNode) {
                                try {
                                    row.parentNode.removeChild(row);
                                } catch (e) {
                                    row.outerHTML = "";
                                }
                            }

                            if (message) {
                                alert(decodeURIComponent(path) + " {{ strings.delete_success }}");
                            }
                        } catch (e) {
                            alert("{{ strings.error_occured }} " + (e.message || ""));
                        }
                    } else if (xhr.status == 409) {
                        alert("{{ strings.directory_not_empty }}");
                    } else if (xhr.status == 404) {
                        alert("{{ strings.not_found }}");
                    } else {
                        try {
                            var errorResponse = JSON.parse(xhr.responseText);
                            alert("{{ strings.error_occured }} " + errorResponse.message);
                        } catch (e) {
                            alert("{{ strings.error_occured }}");
                        }
                    }
                    if (onComplete) onComplete();
                }
            };

            try {
                xhr.send();
            } catch (e) {
                alert("{{ strings.error_deleting }}");
                if (onComplete) onComplete();
            }
        }

        {% if path != "/" or admin or private %}
        function uploadViaAPI(files, path) {
            if (!files || !files.length) {
                alert("{{ strings.select_files }}");
                return;
            }

            var resultsDiv = document.getElementById('uploadResults');

            for (var i = 0; i < files.length; i++) {
                (function (file) {
                    var container = document.createElement("div");

                    var label = document.createElement("div");
                    label.textContent = "{{ strings.uploading }} " + file.name;
                    container.appendChild(label);

                    var progressBar = document.createElement("progress");
                    progressBar.max = 100;
                    progressBar.value = 0;
                    progressBar.style.width = "100%";
                    container.appendChild(progressBar);

                    var info = document.createElement("div");
                    info.style.fontSize = "small";
                    info.textContent = "0% - 0 B / " + formatBytes(file.size) + " @ 0 KB/s";
                    container.appendChild(info);

                    resultsDiv.appendChild(container);

                    var formData = new FormData();
                    formData.append("files", file);
                    formData.append("path", path || "/private/");

                    var xhr = new XMLHttpRequest();
                    xhr.open("POST", "/api/upload", true);

                    var startTime = new Date().getTime();

                    xhr.upload.onprogress = function (e) {
                        if (e.lengthComputable) {
                            var percent = (e.loaded / e.total) * 100;
                            var elapsed = (new Date().getTime() - startTime) / 1000;
                            var speed = e.loaded / elapsed;

                            progressBar.value = percent;

                            info.textContent =
                                percent.toFixed(1) + "% - " + formatBytes(e.loaded) + " / " + formatBytes(e.total) +
                                " @ " + formatBytes(speed) + "/s";
                        }
                    };

                    xhr.onload = function () {
                        progressBar.style.display = "none";
                        container.style.display = "none";

                        if (xhr.status === 200) {
                            try {
                                var response = JSON.parse(xhr.responseText);
                                var result = response[0];

                                if (!result || result.url == null) {
                                    alert("{{ strings.upload_error }} " + (result && result.error ? result.error : ""));
                                    return;
                                }

                                info.remove();

                                var tableBody = document.querySelector("table tbody");
                                if (tableBody) {
                                    var row = document.createElement("tr");

                                    var tdCheck = document.createElement("td");
                                    var cb = document.createElement("input");
                                    cb.type = "checkbox";
                                    cb.className = "delete-checkbox";
                                    cb.value = result.name;
                                    tdCheck.appendChild(cb);
                                    row.appendChild(tdCheck);

                                    var tdName = document.createElement("td");
                                    var a = document.createElement("a");
                                    a.href = result.url;
                                    a.innerHTML = '<img src="/static/images/icons/{% if hires %}hires/{% endif %}' + result.icon + '.png" class="icon">' + result.name;
                                    tdName.appendChild(a);
                                    row.appendChild(tdName);

                                    var tdSize = document.createElement("td");
                                    tdSize.textContent = result.size || "—";
                                    row.appendChild(tdSize);

                                    var tdType = document.createElement("td");
                                    tdType.textContent = "{{ strings.file }}";
                                    row.appendChild(tdType);

                                    var tdDelete = document.createElement("td");
                                    var delLink = document.createElement("a");
                                    delLink.style.cursor = "pointer";
                                    delLink.textContent = "{{ strings.delete }}";
                                    delLink.onclick = function () {
                                        deleteFile(this, result.name, true);
                                    };
                                    tdDelete.appendChild(delLink);
                                    row.appendChild(tdDelete);

                                    tableBody.appendChild(row);
                                }
                            } catch (e) {
                                alert(file.name + " {{ strings.upload_parse_error }}");
                            }
                        } else {
                            alert(file.name + " {{ strings.upload_failed_status }} " + xhr.status);
                        }
                    };

                    xhr.onerror = function () {
                        progressBar.style.display = "none";
                        info.style.display = "none";
                        alert(file.name + " {{ strings.upload_failed_network }}");
                    };

                    try {
                        xhr.send(formData);
                    } catch (e) {
                        label.textContent = file.name + " {{ strings.upload_error }}";
                    }
                })(files[i]);
            }
        }

        function formatBytes(bytes) {
            if (bytes === 0) return "0 B";
            var k = 1024;
            var sizes = ["B", "KB", "MB", "GB", "TB"];
            var i = Math.floor(Math.log(bytes) / Math.log(k));
            return (bytes / Math.pow(k, i)).toFixed(1) + " " + sizes[i];
        }

        (function () {
            if (!window.addEventListener) {
                return;
            }

            var dropTarget = document.body;

            function preventDefaults(e) {
                if (e.preventDefault) e.preventDefault();
                if (e.stopPropagation) e.stopPropagation();
                return false;
            }

            function highlight() {
                dropTarget.style.backgroundColor = "#000";
                dropTarget.style.border = "5px dashed #202020";
            }

            function unhighlight() {
                dropTarget.style.backgroundColor = "";
                dropTarget.style.border = "";
            }

            dropTarget.addEventListener('dragenter', function (e) {
                preventDefaults(e);
                highlight();
            }, false);

            dropTarget.addEventListener('dragover', function (e) {
                preventDefaults(e);
                highlight();
            }, false);

            dropTarget.addEventListener('dragleave', function (e) {
                preventDefaults(e);
                unhighlight();
            }, false);

            dropTarget.addEventListener('drop', function (e) {
                preventDefaults(e);
                unhighlight();

                var dt = e.dataTransfer;
                if (dt && dt.files && dt.files.length) {
                    var pathname = "/";
                    if (window.location && typeof window.location.pathname === "string") {
                        pathname = window.location.pathname;
                    }
                    if (typeof uploadViaAPI === "function") {
                        uploadViaAPI(dt.files, pathname);
                    }
                }
            }, false);
        })();
        {% endif %}
    </script>
{% endif %}
{% endblock scripts %}