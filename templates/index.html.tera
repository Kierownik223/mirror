{% extends "base" %}

{% block content %}
<div class="breadcrumb">
    <span><a href="/">MARMAK Mirror</a>/</span><span class="seg"> </span>
    {% if path != "/" %}
        {% set segments = path | split(pat="/") %}
        {% for i in range(end=segments | length) %}
            {% set subpath = segments | slice(start=0, end=i+1) %}
            {% set url = subpath | join(sep="/") %}
            {% if url != "" %}
                <span><a href="{{ url | urlencode }}/">{{ segments[i] }}</a>/</span><span class="seg"> </span>
            {% endif %}
        {% endfor %}
    {% endif %}
</div>
<table>
    {% if is_logged_in %}
    <thead>
        <tr>
            <td style="width: 1em; white-space: nowrap;"><input type="checkbox" id="selectAll" onclick="toggleAllCheckboxes(this)"></td>
            <td><a style="cursor: pointer;" href="javascript:;" onclick="downloadAsZip()" id="downloadZip">{{ strings.download_zip }} (BETA)</a>
            {% if admin %}
            <a style="cursor: pointer;" href="javascript:;" onclick="deleteSelected()">{{ strings.delete }}</a>
            {% endif %}
            </td>
        </tr>
    </thead>
    {% endif %}
    <tbody>
        {% if path != "/" %}
        <tr>
            {% if is_logged_in %}<td></td>{% endif %}
            <td><a href="../"><img src="/static/images/icons/{% if hires %}hires/{% endif %}folder.png" class="icon">../</a></td>
            <td>---</td>
            <td>{{ strings.folder }}</td>
        </tr>
        {% endif %}

        {% for s in dirs %}
        <tr>
            {% if is_logged_in %}
            <td><input type="checkbox" class="delete-checkbox" value="{{ s.name | safe | addslashes }}"></td>
            {% endif %}
            <td><a href="{{ s.name | urlencode }}/"><img src="/static/images/icons/{% if hires %}hires/{% endif %}{{ s.icon }}.png" class="icon">{{ s.name }}/</a></td>
            <td>{{ s.size }}</td>
            <td>{{ strings.folder }}</td>
            {% if admin %}
            <td><a style="cursor: pointer;" href="javascript:;" onclick="deleteFile(this, '{{ s.name | safe | addslashes }}', true)">{{ strings.delete }}</a></td>
            {% endif %}
        </tr>
        {% endfor %}
        {% for s in files %}
        <tr>
            {% if is_logged_in %}
            <td><input type="checkbox" class="delete-checkbox" value="{{ s.name | safe | addslashes }}"></td>
            {% endif %}
            <td><a href="{{ s.name | urlencode }}"><img src="/static/images/icons/{% if hires %}hires/{% endif %}{{ s.icon }}.png" class="icon">{{ s.name }}</a></td>
            <td>{{ s.size }}</td>
            <td>{{ strings.file }}</td>
            {% if admin %}
            <td><a style="cursor: pointer;" href="javascript:;" onclick="deleteFile(this, '{{ s.name | safe | addslashes }}', true)">{{ strings.delete }}</a></td>
            {% endif %}
        </tr>
        {% endfor %}
    </tbody>
</table>
{% if markdown != "" %}
<p><span><img class="icon" src="/static/images/icons/{% if hires %}hires/{% endif %}md.png">README.md</span></p>
{{ markdown | safe}}
{% endif %}
{% endblock content %}

{% block scripts %}
{% if is_logged_in %}
    <script src="/static/polyfills.js"></script>
    <script>
        function toggleAllCheckboxes(master) {
            var inputs = document.getElementsByTagName("input");
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].type === "checkbox" && hasClass(inputs[i], "delete-checkbox")) {
                    inputs[i].checked = master.checked;
                }
            }
        }

        function downloadAsZip() {
            var inputs = document.getElementsByTagName("input");
            var filePathList = [];
            var pathname = "/";
            if (window.location && typeof window.location.pathname === "string") {
                pathname = window.location.pathname;
            }

            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                if (input.type === "checkbox" && hasClass(input, "delete-checkbox") && input.checked) {
                    filePathList.push(pathname + input.value);
                }
            }

            if (filePathList.length === 0) {
                alert("{{ strings.select_files }}");
                return;
            }

            var formData = new FormData();
            formData.append("files", JSON.stringify(filePathList));

            var download_link = document.getElementById("downloadZip");
            download_link.innerText = "{{ strings.preparing_zip }}";
            download_link.onclick = null;

            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/api/zip", true);

            xhr.responseType = "blob";

            xhr.onload = function () {
                if (xhr.status === 200) {
                    var blob = xhr.response;

                    if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                        window.navigator.msSaveOrOpenBlob(blob, "download.zip");
                    } else {
                        var link = document.createElement('a');
                        var url = window.URL.createObjectURL(blob);
                        link.href = url;
                        link.download = "download.zip";
                        link.click();
                        window.URL.revokeObjectURL(url);
                    }

                    download_link.innerText = "{{ strings.download_zip }} (BETA)";
                    download_link.onclick = function () { downloadAsZip(); };
                } else {
                    alert("{{ strings.error }}");
                }
            };

            xhr.onerror = function () {
                alert("{{ strings.error }}");
            };

            xhr.send(formData);
        }

        function hasClass(el, cls) {
            return el.className && (" " + el.className + " ").indexOf(" " + cls + " ") > -1;
        }
    </script>
{% endif %}
{% if admin %}
    <script>
        function deleteSelected() {
            var inputs = document.getElementsByTagName("input");
            var filePathList = [];
            var elementList = [];
            var pathname = "/";
            if (window.location && typeof window.location.pathname === "string") {
                pathname = window.location.pathname;
            }

            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                if (input.type === "checkbox" && hasClass(input, "delete-checkbox") && input.checked) {
                    filePathList[filePathList.length] = input.value;

                    var row = input;
                    while (row && row.nodeType === 1 && String(row.tagName).toLowerCase() !== "tr") {
                        row = row.parentNode;
                    }

                    elementList[elementList.length] = row;
                }
            }

            if (filePathList.length === 0) {
                return;
            }

            var i, confirmMsg = "{{ strings.delete_confirmation }}\n";
            for (i = 0; i < filePathList.length; i++) {
                confirmMsg += filePathList[i] + "\n";
            }

            if (!confirm(confirmMsg)) {
                return;
            }

            var currentIndex = 0;
            function deleteNext() {
                if (currentIndex >= filePathList.length) return;
                var path = filePathList[currentIndex];
                var rowElement = elementList[currentIndex];
                currentIndex++;

                deleteFile(rowElement, path, false, deleteNext);
            }

            deleteNext();
        }

        function deleteFile(element, filePath, message, onComplete) {
            var pathname = "/";
            if (window.location && typeof window.location.pathname === "string") {
                pathname = window.location.pathname;
            }
            var path = pathname + filePath;
            var confirmMsg = "{{ strings.delete_confirmation }} " + decodeURIComponent(path) + "?";

            if (message) {
                if (!confirm(confirmMsg)) {
                    return;
                }
            }

            var xhr;
            if (window.XMLHttpRequest) {
                xhr = new XMLHttpRequest();
            } else {
                try {
                    xhr = new ActiveXObject("Microsoft.XMLHTTP");
                } catch (e) {
                    alert("{{ strings.error_deleting }}");
                    return;
                }
            }

            try {
                xhr.open("DELETE", "/api" + path, true);
            } catch (e) {
                alert("{{ strings.error_deleting }}");
                return;
            }

            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.status == 204) {
                        try {
                            var row = element;
                            while (row && row.nodeType === 1) {
                                if (String(row.tagName).toLowerCase() === 'tr') break;
                                row = row.parentNode;
                            }

                            if (row && row.parentNode) {
                                try {
                                    row.parentNode.removeChild(row);
                                } catch (e) {
                                    row.outerHTML = "";
                                }
                            }

                            if (message) {
                                alert(decodeURIComponent(path) + " {{ strings.delete_success }}");
                            }
                        } catch (e) {
                            alert("{{ strings.error_occured }} " + (e.message || ""));
                        }
                    } else if (xhr.status == 409) {
                        alert("{{ strings.directory_not_empty }}");
                    } else if (xhr.status == 404) {
                        alert("{{ strings.not_found }}");
                    } else {
                        try {
                            var errorResponse = JSON.parse(xhr.responseText);
                            alert("{{ strings.error_occured }} " + errorResponse.message);
                        } catch (e) {
                            alert("{{ strings.error_occured }}");
                        }
                    }
                    if (onComplete) onComplete();
                }
            };

            try {
                xhr.send();
            } catch (e) {
                alert("{{ strings.error_deleting }}");
                if (onComplete) onComplete();
            }
        }
    </script>
{% endif %}
{% endblock scripts %}