{% extends "base" %}

{% block content %}
<a href="/">MARMAK Mirror</a>/<a href="/admin/">{{ strings.admin }}</a>/<a href="/admin/upload">{{ strings.uploader }}</a><br>
{{ strings.welcome }}, {{ username }}!
<br>
<a href="/admin/"><img src="/static/images/icons/{% if hires %}hires/{% endif %}floppy.png" class="icon">{{ strings.admin }}</a>
<a href="/uploads/"><img src="/static/images/icons/{% if hires %}hires/{% endif %}folder.png" class="icon">Uploads</a>
<br>
{% for s in uploadedfiles %}
{% if s.name != "" %}
<a href="{{ s.ext }}"><img src="/static/images/icons/{% if hires %}hires/{% endif %}{{ s.icon }}.png" class="icon">{{ s.name }}</a> {{ strings.upload_success }}<br>
{% endif %}
{% endfor %}

<div id="uploadResults" style="margin-top: 10px; box-sizing: border-box;"></div>

<form method="post" enctype="multipart/form-data" id="uploadForm">
    <label for="file">
        <img class="icon" src="/static/images/icons/{% if hires %}hires/{% endif %}default.png">{{ strings.select_file }}:
    </label>
    <center>
        <input type="file" name="files" id="file" class="text" multiple required>
    </center>

    <label for="path">
        <img class="icon" src="/static/images/icons/{% if hires %}hires/{% endif %}folder.png">{{ strings.target_dir }}:
    </label>
    <center>
        <div class="textbox-container">
            <input type="text" id="path" name="path" class="text" placeholder="{{ strings.target_placeholder }}">
        </div>
        {% if filebrowser %}
        <button type="button" onclick="openDialog()"><span><img src="/static/images/icons/{% if hires %}hires/{% endif %}folder.png" class="icon">{{ strings.browse }}</span></button>
        {% endif %}
    </center>
    <br>

    <img class="icon" src="/static/images/icons/{% if hires %}hires/{% endif %}md.png">{{ strings.max_size }}<br><br>

    <center>
        <button type="submit"><span><img src="/static/images/icons/{% if hires %}hires/{% endif %}favicon.png" class="icon">{{ strings.upload }}</span></button>

        <button type="button" onclick="uploadViaAPI()"><span><img src="/static/images/icons/{% if hires %}hires/{% endif %}favicon.png" class="icon">{{ strings.upload }} (JavaScript)</span></button>
    </center>
</form>

<script>
function uploadViaAPI() {
    var input = document.getElementById('file');
    var path_input = document.getElementById('path');

    var hasFormData = typeof window.FormData !== "undefined";
    var hasFiles = input && typeof input.files !== "undefined";

    if (!input || !path_input || !hasFormData || !hasFiles) {
        alert("{{ strings.upload_not_supported }}");
        return;
    }

    var path = path_input.value;
    var files = input.files;

    if (!files.length) {
        alert("{{ strings.select_files }}");
        return;
    }

    var resultsDiv = document.getElementById('uploadResults');
    resultsDiv.innerHTML = "";

    for (var i = 0; i < files.length; i++) {
        (function(file) {
            var container = document.createElement("div");

            var label = document.createElement("div");
            label.textContent = "{{ strings.uploading }} " + file.name;
            container.appendChild(label);

            var progressBar = document.createElement("progress");
            progressBar.max = 100;
            progressBar.value = 0;
            progressBar.style.width = "100%";
            container.appendChild(progressBar);

            var info = document.createElement("div");
            info.style.fontSize = "small";
            info.textContent = "0% - 0 B / " + formatBytes(file.size) + " @ 0 KB/s";
            container.appendChild(info);

            resultsDiv.appendChild(container);

            var formData = new FormData();
            formData.append("files", file);
            formData.append("path", path);

            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/api/upload", true);

            var startTime = new Date().getTime();

            if (xhr.upload && typeof xhr.upload.onprogress === "function") {
                xhr.upload.onprogress = function(e) {
                    if (e.lengthComputable) {
                        var percent = (e.loaded / e.total) * 100;
                        var elapsed = (new Date().getTime() - startTime) / 1000;
                        var speed = e.loaded / elapsed;

                        progressBar.value = percent;

                        info.textContent =
                            percent.toFixed(1) + "% - " + formatBytes(e.loaded) + " / " + formatBytes(e.total) +
                            " @ " + formatBytes(speed) + "/s";
                    }
                };
            }

            xhr.onload = function() {
                progressBar.style.display = "none";
                info.style.display = "none";

                if (xhr.status === 200) {
                    try {
                        var response = window.JSON && JSON.parse ? JSON.parse(xhr.responseText) : eval('(' + xhr.responseText + ')');
                        var result = response[0];

                        if (!result || result.url == null) {
                            label.textContent = "{{ strings.upload_error }} " + (result && result.error ? result.error : "");
                            return;
                        }

                        var iconPath = '/static/images/icons/{% if hires | safe %}hires/{% endif %}' + result.icon + '.png';

                        var a = document.createElement('a');
                        a.href = result.url;
                        var filePath = a.pathname;

                        label.innerHTML = '<a href="' + result.url + '"><img src="' + iconPath + '" class="icon">' + result.name + '</a> {{ strings.upload_success }} <a style="cursor: pointer;" onclick="deleteFile(this, \'' + filePath + '\')">{{ strings.delete }}</a><br>';
                    } catch (e) {
                        label.textContent = file.name + " {{ strings.upload_parse_error }}";
                    }
                } else {
                    label.textContent = file.name + " {{ strings.upload_failed_status }} " + xhr.status;
                }
            };

            xhr.onerror = function() {
                progressBar.style.display = "none";
                info.style.display = "none";
                label.textContent = file.name + " {{ strings.upload_failed_network }}";
            };

            try {
                xhr.send(formData);
            } catch (e) {
                label.textContent = file.name + " {{ strings.upload_error }}";
            }
        })(files[i]);
    }
}

function formatBytes(bytes) {
    if (bytes === 0) return "0 B";
    var k = 1024;
    var sizes = ["B", "KB", "MB", "GB", "TB"];
    var i = Math.floor(Math.log(bytes) / Math.log(k));
    return (bytes / Math.pow(k, i)).toFixed(1) + " " + sizes[i];
}

function deleteFile(element, filePath) {
    var path = "/" + filePath.replace(/^\/+/, '');

    if (!confirm("{{ strings.delete_confirmation }} " + decodeURIComponent(path) + "?")) {
        return;
    }

    var xhr = new XMLHttpRequest();
    xhr.open("DELETE", "/api" + path, true);

    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            if (xhr.status === 204) {
                var row = element.parentNode.parentElement;
                if (row && row.parentNode) {
                    row.parentNode.removeChild(row);
                }
                alert(decodeURIComponent(path) + " {{ strings.delete_success }}");
            } else if (xhr.status === 409) {
                alert("{{ strings.directory_not_empty }}");
            } else {
                try {
                    var errorResponse = JSON.parse(xhr.responseText);
                    alert("{{ strings.error_occured }} " + errorResponse.message);
                } catch (e) {
                    alert("{{ strings.error_occured }}");
                }
            }
        }
    };

    xhr.onerror = function () {
        console.error("Error deleting file.");
        alert("{{ strings.error_deleting }}");
    };

    xhr.send();
}
</script>

{% if filebrowser %}

<div id="browse_dialog" class="dialog">
    <div class="dialog-content">
        <img class="icon" src="/static/images/icons/{% if hires %}hires/{% endif %}favicon.png">{{ strings.select_folder }}:
        <iframe id="browser_iframe" src="/iframe/"></iframe>
        <center>
            <button onclick="selectPath()">{{ strings.ok }}</button>
            <button onclick="closeDialog()">{{ strings.cancel }}</button>
        </center>
    </div>
</div>

<script src="/static/browser.js"></script>

<link rel="stylesheet" href="/static/browser.css">

{% endif %}

{% endblock content %}